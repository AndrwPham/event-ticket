generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

enum Role {
    Attendee
    Organizer
    Admin
}

enum EventStatus {
    PENDING
    APPROVED
    REJECTED
}

enum TicketStatus {
    UNAVAILABLE
    AVAILABLE
    HELD
    PAID
    CLAIMED
    CANCELLED
}

enum ClaimedTicketStatus {
    READY
    USED
    EXPIRED
    CANCELLED
}

enum OrderStatus {
    PENDING
    PAID
    CANCELLED
    FAILED
}

enum EventType {
    ONLINE
    ONSITE
}

model User {
    id             String        @id @default(auto()) @map("_id") @db.ObjectId
    username       String        @unique
    password       String
    roles          Role[]
    organizationId String?       @db.ObjectId
    organization   Organization? @relation("OrganizationUsers", fields: [organizationId], references: [id], onDelete: Cascade)

    refreshToken          String?
    confirmed             Boolean   @default(false)
    confirmToken          String?
    confirmTokenExpiresAt DateTime?

    attendeeInfo AttendeeInfo? @relation("UserAttendeeInfo")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model AttendeeInfo {
    id         String  @id @default(auto()) @map("_id") @db.ObjectId
    email      String  @unique
    last_name  String?
    first_name String?
    phone      String? @unique
    company    String?

    userId String? @unique @db.ObjectId
    user   User?   @relation("UserAttendeeInfo", fields: [userId], references: [id], onDelete: Cascade)

    orders  Order[]         @relation("AttendeeOrders")
    tickets ClaimedTicket[] @relation("AttendeeClaimedTickets")
    reviews Review[]        @relation("AttendeeReviews")
    // avatars Image[]         @relation("AttendeeAvatars")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Organization {
    id   String @id @default(auto()) @map("_id") @db.ObjectId
    name String @unique

    users         User[]         @relation("OrganizationUsers")
    events        Event[]        @relation("OrganizationEvents")
    issuedTickets IssuedTicket[] @relation("OrganizationIssuedTickets")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Venue {
    id      String  @id @default(auto()) @map("_id") @db.ObjectId
    name    String
    address String?
    layout  Json?
    events  Event[]
}

model Event {
    id                String      @id @default(auto()) @map("_id") @db.ObjectId
    title             String
    description       String
    active_start_date DateTime
    active_end_date   DateTime
    sale_start_date   DateTime
    sale_end_date     DateTime
    city              String?
    district          String?
    ward              String?
    street            String?
    type              EventType
    status            EventStatus @default(PENDING)

    organizationId String       @db.ObjectId
    organization   Organization @relation("OrganizationEvents", fields: [organizationId], references: [id], onDelete: Cascade)

    ticketConfiguration Json?

    tagIds   String[] @db.ObjectId
    posterId String   @db.ObjectId
    imageIds String[] @db.ObjectId

    venueId String? @db.ObjectId
    venue   Venue?  @relation(fields: [venueId], references: [id])

    tickets IssuedTicket[] @relation("EventIssuedTickets")
    reviews Review[]       @relation("EventReviews")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([organizationId])
}

model IssuedTicket {
    id         String       @id @default(auto()) @map("_id") @db.ObjectId
    price      Float
    class      String
    classColor String?
    seat       String
    status     TicketStatus

    holdExpiresAt DateTime?

    eventId String @db.ObjectId
    event   Event  @relation("EventIssuedTickets", fields: [eventId], references: [id], onDelete: Cascade)

    organizationId String       @db.ObjectId
    organization   Organization @relation("OrganizationIssuedTickets", fields: [organizationId], references: [id], onDelete: Cascade)

    currencyId String   @db.ObjectId
    currency   Currency @relation("TicketCurrency", fields: [currencyId], references: [id], onDelete: Restrict)

    claimedTicket ClaimedTicket?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([eventId])
    @@index([organizationId])
    @@index([currencyId])
}

model ClaimedTicket {
    id           String       @id @map("_id") @db.ObjectId
    issuedTicket IssuedTicket @relation(fields: [id], references: [id])

    attendeeId String       @db.ObjectId
    attendee   AttendeeInfo @relation("AttendeeClaimedTickets", fields: [attendeeId], references: [id], onDelete: Cascade)

    orderId String @db.ObjectId
    order   Order  @relation("OrderClaimedTickets", fields: [orderId], references: [id], onDelete: Cascade)

    status ClaimedTicketStatus

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([orderId])
    @@index([attendeeId])
}

model Order {
    id         String      @id @default(auto()) @map("_id") @db.ObjectId
    totalPrice Float
    status     OrderStatus
    method     String

    attendeeId String       @db.ObjectId
    attendee   AttendeeInfo @relation("AttendeeOrders", fields: [attendeeId], references: [id], onDelete: Cascade)

    tickets ClaimedTicket[] @relation("OrderClaimedTickets")

    ticketItems String[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    paymentRefCode Int? @unique

    @@index([attendeeId])
}

model Currency {
    id     String @id @default(auto()) @map("_id") @db.ObjectId
    name   String
    symbol String

    tickets IssuedTicket[] @relation("TicketCurrency")
}

model Review {
    id      String @id @default(auto()) @map("_id") @db.ObjectId
    content String
    rating  Int

    attendeeId String       @db.ObjectId
    attendee   AttendeeInfo @relation("AttendeeReviews", fields: [attendeeId], references: [id], onDelete: Cascade)

    eventId String @db.ObjectId
    event   Event  @relation("EventReviews", fields: [eventId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([attendeeId])
    @@index([eventId])
}

model Tag {
    id   String @id @default(auto()) @map("_id") @db.ObjectId
    name String @unique
}

model Image {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    key         String   @unique
    isPublic    Boolean  @default(false)
    contentType String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}
