generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  Attendee
  Organizer
  Admin
}

model User {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  username       String        @unique
  password       String
  roles          Role[]
  organizationId String?       @db.ObjectId
  organization   Organization? @relation("OrganizationUsers", fields: [organizationId], references: [id], onDelete: Cascade)

  refreshToken          String?
  confirmed             Boolean   @default(false)
  confirmToken          String?
  confirmTokenExpiresAt DateTime?

  attendeeInfo AttendeeInfo? @relation("UserAttendeeInfo")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AttendeeInfo {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  email      String  @unique
  last_name  String?
  first_name String?
  phone      String? @unique
  company    String?

  userId String? @unique @db.ObjectId
  user   User?   @relation("UserAttendeeInfo", fields: [userId], references: [id], onDelete: Cascade)

  orders  Order[]         @relation("AttendeeOrders")
  tickets ClaimedTicket[] @relation("AttendeeClaimedTickets")
  reviews Review[]        @relation("AttendeeReviews")
  avatars Image[]         @relation("AttendeeAvatars")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Organization {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique

  users         User[]         @relation("OrganizationUsers")
  events        Event[]        @relation("OrganizationEvents")
  issuedTickets IssuedTicket[] @relation("OrganizationIssuedTickets")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  description       String
  active_start_date DateTime
  active_end_date   DateTime
  sale_start_date   DateTime
  sale_end_date     DateTime
  city              String?
  district          String?
  ward              String?
  street            String?
  type              String // "online" | "offline" | "hybrid"

  organizationId String       @db.ObjectId
  organization   Organization @relation("OrganizationEvents", fields: [organizationId], references: [id], onDelete: Cascade)

  tagIds String[] @db.ObjectId
  tags   Tag[]    @relation("EventsTags", fields: [tagIds], references: [id])

  images  Image[]        @relation("EventImages")
  tickets IssuedTicket[] @relation("EventIssuedTickets")
  reviews Review[]       @relation("EventReviews")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([organizationId])
}

model IssuedTicket {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  price  Float
  class  String
  seat   String
  status String

  eventId String @db.ObjectId
  event   Event  @relation("EventIssuedTickets", fields: [eventId], references: [id], onDelete: Cascade)

  organizationId String       @db.ObjectId
  organization   Organization @relation("OrganizationIssuedTickets", fields: [organizationId], references: [id], onDelete: Cascade)

  currencyId String   @db.ObjectId
  currency   Currency @relation("TicketCurrency", fields: [currencyId], references: [id], onDelete: Restrict)

  claim  ClaimedTicket? @relation("IssuedTicketClaims")
  images Image[]        @relation("TicketImages")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([eventId])
  @@index([organizationId])
  @@index([currencyId])
}

model ClaimedTicket {
  id       String       @id @default(auto()) @map("_id") @db.ObjectId
  ticketId String       @unique @db.ObjectId
  ticket   IssuedTicket @relation("IssuedTicketClaims", fields: [ticketId], references: [id], onDelete: Cascade)

  attendeeId String       @db.ObjectId
  attendee   AttendeeInfo @relation("AttendeeClaimedTickets", fields: [attendeeId], references: [id], onDelete: Cascade)

  orderId String @db.ObjectId
  order   Order  @relation("OrderClaimedTickets", fields: [orderId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([ticketId, orderId, attendeeId])
  @@index([orderId])
  @@index([attendeeId])
}

model Order {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  totalPrice Float
  status     String
  method     String

  attendeeId String       @db.ObjectId
  attendee   AttendeeInfo @relation("AttendeeOrders", fields: [attendeeId], references: [id], onDelete: Cascade)

  tickets ClaimedTicket[] @relation("OrderClaimedTickets")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([attendeeId])
}

model Currency {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  symbol String

  tickets IssuedTicket[] @relation("TicketCurrency")
}

model Review {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  content String
  rating  Int

  attendeeId String       @db.ObjectId
  attendee   AttendeeInfo @relation("AttendeeReviews", fields: [attendeeId], references: [id], onDelete: Cascade)

  eventId String @db.ObjectId
  event   Event  @relation("EventReviews", fields: [eventId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([attendeeId])
  @@index([eventId])
}

model Tag {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique

  eventIds String[] @db.ObjectId
  events   Event[]  @relation("EventsTags", fields: [eventIds], references: [id])
}

model Image {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  type String // "logo" | "banner" | "avatar" | "ticket"
  url  String

  eventId String? @db.ObjectId
  event   Event?  @relation("EventImages", fields: [eventId], references: [id], onDelete: Cascade)

  ticketId String?       @db.ObjectId
  ticket   IssuedTicket? @relation("TicketImages", fields: [ticketId], references: [id], onDelete: Cascade)

  attendeeId String?       @db.ObjectId
  attendee   AttendeeInfo? @relation("AttendeeAvatars", fields: [attendeeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
