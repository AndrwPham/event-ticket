generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                      String      @id @default(auto()) @map("_id") @db.ObjectId
  email                   String      @unique
  password                String
  username                String      @unique
  accessToken             String?
  refreshToken            String?
  confirmed               Boolean     @default(false)
  role                    String      @default("USER") // e.g. "USER", "ADMIN"
  confirmToken            String? //mail confirmation token
  confirmTokenExpiresAt   DateTime?
  resetToken              String? //reset password token
  resetTokenExpiresAt     DateTime?

  last_name               String?
  first_name              String?

  phone                   String?
  address                 String?
  avatars                 Image[]             @relation("UserAvatar")

  orders                  Order[]             @relation("UserOrders")
  tickets                 TicketItem[]        @relation("UserTicketItems") //for user who bought the ticket
  reviews                 Review[]            @relation("UserReviews")
  events                  EventOrganizer[]    @relation("UserEvents") //for user who created the event
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id                      String      @id @default(auto()) @map("_id") @db.ObjectId
  title                   String
  description             String
  active_start_date       DateTime
  active_end_date         DateTime
  sale_start_date         DateTime
  sale_end_date           DateTime
  city                    String?
  district                String?
  ward                    String?
  street                  String?
  type                    String      // e.g. "online", "offline", "hybrid"

  organizer               EventOrganizer[]    @relation("EventOrganizers")
  categories              EventCategory[]     @relation("EventCategories")
  images                  Image[]             @relation("EventImages")
  tickets                 Ticket[]            @relation("EventTickets")
  reviews                 Review[]            @relation("EventReviews")

  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
}

model Ticket {
  
  id                      String        @id @default(auto()) @map("_id") @db.ObjectId
  name                    String
  description             String?
  price                   Float
  quantity                Int
  class                   String
  status                  String

  event                   Event         @relation("EventTickets", fields: [eventId], references: [id], onDelete: Cascade)
  eventId                 String
  images                  Image[]       @relation("TicketImages")
  ticketItems             TicketItem[]  @relation("TicketItems")

  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt

  @@index([eventId])
}

model TicketItem{

  id                      String        @id @default(auto()) @map("_id") @db.ObjectId

  ticket                  Ticket        @relation("TicketItems", fields: [ticketId], references: [id], onDelete: Cascade)
  ticketId                String
  order                   Order         @relation("OrderTicket", fields: [orderId], references: [id], onDelete: Cascade)
  orderId                 String      
  user                    User          @relation("UserTicketItems", fields: [userId], references: [id], onDelete: Cascade)
  userId                  String

  @@index([ticketId])
  @@index([orderId])
  @@index([userId])
}
model Order {
  id                      String        @id @default(auto()) @map("_id") @db.ObjectId
  totalPrice              Float
  status                  String       
  method                  String
  user                    User          @relation("UserOrders", fields: [userId], references: [id], onDelete: Cascade)
  userId                  String
  ticketItems             TicketItem[]  @relation("OrderTicket")
  createdAt               DateTime      @default(now())
  
  @@index ([userId])
}


model Review {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  content        String
  rating         Int       
  user           User?      @relation("UserReviews", fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  event          Event?     @relation("EventReviews", fields: [eventId], references: [id], onDelete: Cascade)
  eventId        String
  createdAt      DateTime  @default(now())

  @@index([userId])
  @@index([eventId])
}

model Category {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String    @unique

  events         EventCategory[] @relation("CategoryEvents")
}

model EventCategory {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId

  eventId         String
  event           Event     @relation("EventCategories", fields: [eventId], references: [id], onDelete: Cascade)

  categoryId      String 
  category        Category  @relation("CategoryEvents", fields: [categoryId], references: [id], onDelete: Cascade)

  @@index([eventId])
  @@index([categoryId])
}

model EventOrganizer {

  id             String     @id @default(auto()) @map("_id") @db.ObjectId

  userId        String
  user          User       @relation("UserEvents", fields: [userId], references: [id], onDelete: Cascade)

  eventId       String
  event         Event      @relation("EventOrganizers", fields: [eventId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([eventId])
}
model Image {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  type      String   //"logo | banner | avatar | ticket"
  url       String

  event     Event?   @relation("EventImages", fields: [eventId], references: [id], onDelete: Cascade)
  eventId   String?

  ticket    Ticket?  @relation("TicketImages", fields: [ticketId], references: [id], onDelete: Cascade)
  ticketId  String?

  user      User?    @relation("UserAvatar", fields: [userId], references: [id], onDelete: Cascade)
  userId    String?
  
  createdAt DateTime @default(now())
}